<?php

/**
 * @file
 * Business Rules module.
 */

use Drupal\business_rules\Events\BusinessRulesEvent;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;

// @TODO token integration.

/**
 * Implements hook_help().
 */
function business_rules_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the business_rules module.
    case 'help.page.business_rules':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Business rules') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function business_rules_entity_presave(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $reacts_on_definition = \Drupal::getContainer()
      ->get('plugin.manager.business_rules.reacts_on')
      ->getDefinition('entity_presave');

    $entity_type_id = $entity->getEntityTypeId();
    $event          = new BusinessRulesEvent($entity, [
      'entity_type_id'   => $entity_type_id,
      'bundle'           => $entity->bundle(),
      'entity'           => $entity,
      'entity_unchanged' => $entity->original,
      'reacts_on'        => $reacts_on_definition,
    ]);
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
  }

}

/**
 * Implements hook_entity_update().
 */
function business_rules_entity_update(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $reacts_on_definition = \Drupal::getContainer()
      ->get('plugin.manager.business_rules.reacts_on')
      ->getDefinition('entity_update');

    $entity_type_id = $entity->getEntityTypeId();
    $event          = new BusinessRulesEvent($entity, [
      'entity_type_id'   => $entity_type_id,
      'bundle'           => $entity->bundle(),
      'entity'           => $entity,
      'entity_unchanged' => $entity->original,
      'reacts_on'        => $reacts_on_definition,
    ]);
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
  }
}

/**
 * Implements hook_entity_insert().
 */
function business_rules_entity_insert(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $reacts_on_definition = \Drupal::getContainer()
      ->get('plugin.manager.business_rules.reacts_on')
      ->getDefinition('entity_insert');

    $entity_type_id = $entity->getEntityTypeId();
    $event          = new BusinessRulesEvent($entity, [
      'entity_type_id'   => $entity_type_id,
      'bundle'           => $entity->bundle(),
      'entity'           => $entity,
      'entity_unchanged' => $entity->original,
      'reacts_on'        => $reacts_on_definition,
    ]);
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
  }
}

/**
 * Implements hook_entity_delete().
 */
function business_rules_entity_delete(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $reacts_on_definition = \Drupal::getContainer()
      ->get('plugin.manager.business_rules.reacts_on')
      ->getDefinition('entity_delete');

    $entity_type_id = $entity->getEntityTypeId();
    $event          = new BusinessRulesEvent($entity, [
      'entity_type_id'   => $entity_type_id,
      'bundle'           => $entity->bundle(),
      'entity'           => $entity,
      'entity_unchanged' => $entity->original,
      'reacts_on'        => $reacts_on_definition,
    ]);
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
  }
}

/**
 * Implements hook_form_alter().
 */
function business_rules_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ((method_exists($form_state->getFormObject(), 'getEntity') && !$form_state->isCached()) &&
    // Preventing add validation on ajax operations.
    (!isset($_GET['ajax_form']) || $_GET['ajax_form'] != 1) && (!isset($_GET['_wrapper_format']) || $_GET['_wrapper_format'] != 'drupal_ajax')
  ) {
    $entity = $form_state->getFormObject()->getEntity();

    if ($entity instanceof ContentEntityInterface) {

      $reacts_on_definition = \Drupal::getContainer()
        ->get('plugin.manager.business_rules.reacts_on')
        ->getDefinition('form_validation');

      $event = new BusinessRulesEvent($entity, [
        'form_id'          => $form_id,
        'form_state'       => $form_state,
        'form'             => $form,
        'entity_type_id'   => $entity->getEntityTypeId(),
        'bundle'           => $entity->bundle(),
        'entity'           => $entity,
        'entity_unchanged' => $entity->original,
        'reacts_on'        => $reacts_on_definition,
      ]);

      $form_state->set('business_rules_event', $event);

      // We can't dispatch an event here, otherwise it would be processed before
      // the form validation. In this case, the FormValidator will take care of
      // the event process.
      $form['#validate'][] = 'Drupal\business_rules\Plugin\BusinessRulesReactsOn\FormValidation::validateForm';

    }
  }

}

/**
 * Implements hook_entity_view().
 */
function business_rules_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $reacts_on_definition = \Drupal::getContainer()
      ->get('plugin.manager.business_rules.reacts_on')
      ->getDefinition('entity_is_viewed');

    $entity_type_id = $entity->getEntityTypeId();
    $event          = new BusinessRulesEvent($entity, [
      'entity_type_id'   => $entity_type_id,
      'bundle'           => $entity->bundle(),
      'entity'           => $entity,
      'entity_unchanged' => $entity->original,
      'reacts_on'        => $reacts_on_definition,
    ]);
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
  }
}

/**
 * Implements hook_entity_load().
 */
function business_rules_entity_load(array $entities, $entity_type_id) {
  foreach ($entities as $entity) {
    if ($entity instanceof ContentEntityInterface) {
      $reacts_on_definition = \Drupal::getContainer()
        ->get('plugin.manager.business_rules.reacts_on')
        ->getDefinition('entity_is_loaded');

      $entity_type_id = $entity->getEntityTypeId();
      $event          = new BusinessRulesEvent($entity, [
        'entity_type_id'   => $entity_type_id,
        'bundle'           => $entity->bundle(),
        'entity'           => $entity,
        'entity_unchanged' => $entity->original,
        'reacts_on'        => $reacts_on_definition,
      ]);
      /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
      $event_dispatcher = \Drupal::service('event_dispatcher');
      $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
    }
  }
}

/**
 * Implements hook_user_login().
 */
function business_rules_user_login($account) {
  $reacts_on_definition = \Drupal::getContainer()
    ->get('plugin.manager.business_rules.reacts_on')
    ->getDefinition('user_login');

  $entity_type_id = $account->getEntityTypeId();
  $event          = new BusinessRulesEvent($account, [
    'entity_type_id'   => $entity_type_id,
    'bundle'           => $account->bundle(),
    'entity'           => $account,
    'entity_unchanged' => NULL,
    'reacts_on'        => $reacts_on_definition,
  ]);
  /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
}

/**
 * Implements hook_user_logout().
 */
function business_rules_user_logout($account) {
  $reacts_on_definition = \Drupal::getContainer()
    ->get('plugin.manager.business_rules.reacts_on')
    ->getDefinition('user_logout');

  $account = $account->getAccount();
  $entity  = User::load($account->id());

  $entity_type_id = $entity->getEntityTypeId();
  $event          = new BusinessRulesEvent($entity, [
    'entity_type_id'   => $entity_type_id,
    'bundle'           => $entity->bundle(),
    'entity'           => $entity,
    'entity_unchanged' => NULL,
    'reacts_on'        => $reacts_on_definition,
  ]);
  /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
}

/**
 * Implements hook_cache_flush().
 */
function business_rules_cache_flush() {
  $key_value = \Drupal::keyValueExpirable('business_rules.debug');
  $key_value->deleteAll();
}

/**
 * Implements hook_mail().
 */
function business_rules_mail($key, &$message, $params) {
  if ($key == 'business_rules_mail') {
    $message['from']    = \Drupal::config('system.site')->get('mail');
    $message['subject'] = $params['subject'];
    $message['body'][]  = $params['message'];
  }
}
